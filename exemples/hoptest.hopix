type list = Nil () | Cons (int, list)
rec map (f : int => int) (l : list) : list = 
  case l with 
  | Nil () -> Nil ()
  | Cons (x, xs) -> Cons (f x, map f xs)
  end
val l = Cons (1, Cons (2, Cons (3, Nil ())))
val m = map { (x : int) -> x + 1 } l
rec sum (l : list) : list =
  case l with
  | Nil () -> 0
  | Cons (x, xs) -> x + sum xs
  end
val s = sum m